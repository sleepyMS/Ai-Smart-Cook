{"version":3,"file":"static/js/955.66960d15.chunk.js","mappings":"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","sources":["components/QuestionBoard/Questionboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom'; // Link 추가\r\nimport \"./Questionboard.css\"\r\n\r\nconst Question = () => {\r\n  const [boards, setBoards] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  //게시판 데이터 가져오기\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:817/boards/');\r\n        const data = await response.json();\r\n        setBoards(data);\r\n        console.log(data);\r\n\r\n        if (!response.ok) {\r\n          throw new Error('데이터를 불러오는데 실패했습니다');\r\n        }\r\n      } catch (error) {\r\n        console.error('데이터를 불러오는 중 오류 발생:', error);\r\n      } finally {\r\n        setLoading(false); // 데이터 로딩 완료 후 로딩 상태를 false로 변경\r\n      }\r\n    };\r\n    \r\n    fetchData(); // fetchData 함수 호출\r\n  }, []); // 배열의 값이 바뀔 떄만 실행 -> 의존성 배열 , 빈 배열은 실행 한번만\r\n\r\n  // 각 게시물의 조회수와 좋아요 정보를 관리하는 상태\r\n  const [viewCounts, setViewCounts] = useState({});\r\n  const [likes, setLikes] = useState({});\r\n\r\n  // 게시물 제목을 클릭할 때마다 조회수를 증가시키는 함수\r\n  const increaseViewCount = (id) => {\r\n    if (localStorage.getItem('user')) {\r\n      const newViewCounts = { ...viewCounts };\r\n      newViewCounts[id] = (newViewCounts[id] || 0) + 1;\r\n      setViewCounts(newViewCounts);\r\n\r\n      // 로컬 저장소에 조회수 저장\r\n      localStorage.setItem('viewCounts', JSON.stringify(newViewCounts));\r\n    }\r\n    else \r\n      alert(\"로그인을 해주세요.\")\r\n  };\r\n\r\n    // 좋아요를 증가시키는 함수\r\n    const increaseLike = (id) => {\r\n      const user = JSON.parse(localStorage.getItem('user'));\r\n      if (user) {\r\n        const newLikes = { ...likes };\r\n        newLikes[id] = newLikes[id] || [];\r\n        if (!newLikes[id].includes(user.name)) {\r\n          newLikes[id].push(user.name);\r\n          setLikes(newLikes);\r\n          // 로컬 저장소에 좋아요 정보 저장\r\n          localStorage.setItem('likes', JSON.stringify(newLikes));\r\n    \r\n          // 해당 게시물의 좋아요 정보를 서버에 업데이트\r\n          fetch(`http://localhost:817/boards/${id}/like`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ name: user.name }), // 사용자의 이름만 전송\r\n          })\r\n          .then(response => {\r\n            if (!response.ok) {\r\n              throw new Error('좋아요 정보를 업데이트하는데 실패했습니다');\r\n            }\r\n          })\r\n          .catch(error => console.error('좋아요 정보 업데이트 중 오류 발생:', error));\r\n        }\r\n      }\r\n    };\r\n    \r\n    // 좋아요를 감소시키는 함수\r\n    const decreaseLike = (id) => {\r\n      const user = JSON.parse(localStorage.getItem('user'));\r\n      if (user && likes[id]) {\r\n        const newLikes = { ...likes };\r\n        newLikes[id] = newLikes[id].filter(name => name !== user.name);\r\n        setLikes(newLikes);\r\n        // 로컬 저장소에 좋아요 정보 저장\r\n        localStorage.setItem('likes', JSON.stringify(newLikes));\r\n    \r\n        // 해당 게시물의 좋아요 정보를 서버에 업데이트\r\n        fetch(`http://localhost:817/boards/${id}/like/${user.name}`, {\r\n          method: 'DELETE',\r\n        })\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw new Error('좋아요 정보를 업데이트하는데 실패했습니다');\r\n          }\r\n        })\r\n        .catch(error => console.error('좋아요 정보 업데이트 중 오류 발생:', error));\r\n      }\r\n    };\r\n\r\n\r\n\r\n  // 컴포넌트가 처음 렌더링될 때 로컬 저장소에서 조회수와 좋아요 정보를 불러옴\r\n  useEffect(() => {\r\n    const storedViewCounts = localStorage.getItem('viewCounts');\r\n    if (storedViewCounts) {\r\n      setViewCounts(JSON.parse(storedViewCounts));\r\n    }\r\n\r\n    const storedLikes = localStorage.getItem('likes');\r\n    if (storedLikes) {\r\n      setLikes(JSON.parse(storedLikes));\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1 className='header_logo'>\r\n        <Link to= '/'>MOTIV</Link>\r\n      </h1>\r\n      <div className=\"board-container\">\r\n        <h2>게시물 목록</h2>\r\n        {loading ? (\r\n          <p>Loading...</p> // 로딩 중일 때 표시될 내용\r\n        ) : (\r\n          <ul className=\"board-list\">\r\n            {boards.length > 0 && boards.map((board, index) => (\r\n              <li key={index} className=\"board-item\">\r\n                {/* Link를 이용해 클릭 시 URL 변경 */}\r\n                <Link to={localStorage.getItem('user') ? `/inboard/${board.id}` : '#'} onClick={() => increaseViewCount(board.id)}>\r\n                  <h3>제목: {board.titleBoard}</h3>\r\n                </Link>\r\n                <p>{board.name}</p>\r\n                {/* 각 게시물의 조회수를 표시 */}\r\n                <p>조회수: {viewCounts[board.id] || 0}</p>\r\n                {/* 좋아요 버튼 */}\r\n                {localStorage.getItem('user') && (\r\n                  <div>\r\n                    <button onClick={() => increaseLike(board.id)}>좋아요</button>\r\n                    <button onClick={() => decreaseLike(board.id)}>좋아요 취소</button>\r\n                  </div>\r\n                )}\r\n                {/* 좋아요 수 */}\r\n                <p>좋아요 수: {likes[board.id] ? likes[board.id].length : 0}</p>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Question;\r\n"],"names":["Question","boards","setBoards","useState","loading","setLoading","useEffect","async","response","fetch","data","json","console","log","ok","Error","error","fetchData","viewCounts","setViewCounts","likes","setLikes","storedViewCounts","localStorage","getItem","JSON","parse","storedLikes","_jsxs","children","_jsx","className","Link","to","length","map","board","index","concat","id","onClick","newViewCounts","setItem","stringify","alert","increaseViewCount","titleBoard","name","user","newLikes","includes","push","method","headers","body","then","catch","increaseLike","filter","decreaseLike"],"sourceRoot":""}